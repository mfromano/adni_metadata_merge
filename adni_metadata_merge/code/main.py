#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 11 15:04:13 2020

@author: mfromano
"""

import os
import pandas as pd
import numpy as np
os.chdir('/home/mfromano/Research/alzheimers/adni_metadata_merge/code')
from metadata_merge_utilities import *


def generate_mri_subjects():
    mri_sheet = pd.read_csv(FILE_LIST['mri1']['loc'])
    mri_sheet3 = pd.read_csv(FILE_LIST['mri3']['loc'])
    mri_subjects = np.union1d(pd.unique(mri_sheet.RID), pd.unique(mri_sheet3.RID))
    # get info across all 5 documents for all subjects
    participants_mri = [ParticipantCollection(x) for x in mri_subjects]
    print('finished generating participants')
    output_collection = []
    for x in participants_mri:
        output_collection.append(merge_data(x))
    output_spreadsheet = pd.concat(output_collection)
    output_spreadsheet.to_csv('summary_metadata_all_mri.csv')
    return output_spreadsheet


def has_fields(output_spreadsheet, bool_operator):
    '''
    

    Parameters
    ----------
    bool_operator : string with 
        list of fields to look for to determine number of individuals with  all of these fields.
    output_spreadsheet : pandas DataFrame
        DataFrame as generated by generate_mri_subjects

    Returns
    -------
    RIDs for patients with all of the entered fields.

    '''
    fields = ['']

def has_imaging(output_spreadsheet):
    '''
    
    Find subjects with: amyloid, tau, and 3T
    '''
    rid_with_all_imaging = []
    rids = pd.unique(output_spreadsheet.RID)
    for rid in rids:
        subject_csv = output_spreadsheet.loc[output_spreadsheet.RID.eq(rid)]
        has_mri3 = any(subject_csv.mri3.eq(1))
        has_pib = any(subject_csv.pib.eq(1))
        has_tau2 = any(subject_csv.tau2.eq(1))
        has_tau3 = any(subject_csv.tau3.eq(1))
        has_amyloid = any(subject_csv.amyloid.eq(1))
        has_amyloid2 = any(subject_csv.amyloid2.eq(1))
        
        has_any_amyloid = (has_amyloid or has_amyloid2 or has_pib)
        has_any_tau = (has_tau2 or has_tau3)
        if (has_any_amyloid and has_any_tau and has_mri3):
            rid_with_all_imaging.append(rid)
    return rid_with_all_imaging

def has_longitudinal(output_spreadsheet):
    
# if __name__ == '__main__':
#     generate_mri_subjects()